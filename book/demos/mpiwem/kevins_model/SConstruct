import os
env = Environment(ENV = os.environ)
os.environ['OMP_NUM_THREADS'] = '8'

from rsf.proj import *

# get velocity model
Fetch('vel.bin',
      server='http://ualberta.ca',
      top='~kstanton',
      dir='files')
Flow('vel','vel.bin',
     '''
     bin2rsf d1=5 d2=10 n1=600 n2=700 bfile=${SOURCES[0]} |
     put o1=0 o2=10 label1="z" label2="x" unit1="m" unit2="m"
     ''',stdin=-1)


# Smooth the velocity field used for migration
Flow('vel_smooth','vel',
     '''
     sfsmooth rect1=50 rect2=50
     ''')

# Density
Flow('den','vel','math output=1')
 
Flow('r_',None,'math n1=700 d1=10 o1=10 output=0')
Flow('s_',None,'math n1=1   d1=0  o1=0  output=0')
# receiver positions
Flow('zr','r_','math output=10')
Flow('xr','r_','math output="x1"')
Flow('rec',['xr','zr'],'''cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)

# Wavelet
Flow('wav',None,
     '''
     spike mag=0.1 n1=4000 d1=0.001 k1=200 | 
     ricker1 frequency=20 
     ''')

Flow('wav_resample',None,
     '''
     spike mag=0.1 n1=1000 d1=0.001 k1=50 
     ''')

shots = []
nsx = 1
dsx = 100.0
osx = 3500.0
for ishot in range(0,nsx):
     sx = osx + ishot*dsx
     shot = 'd_%d' % ishot
     shots.append(shot)
     # shot positions
     Flow('zs_%d' % ishot,'s_','math output=10')
     Flow('xs_%d' % ishot,'s_','math output=%d' % sx)
     Flow('rs_%d' % ishot,'s_','math output=1')
     Flow('src_%d' % ishot,['xs_%d' % ishot,'zs_%d' % ishot,'rs_%d' % ishot],'''
          cat axis=2 space=n
          ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
          ''', stdin=0)
     # offset
     Flow('offset_%d' % ishot,'xr','math output="input-%g"' % sx)
     # Finite-difference modeling
     Flow('d_fd_%d' % ishot,'wav vel den src_%d rec' % ishot,
          '''
          transp | 
          awefd2d 
          vel=${SOURCES[1]} den=${SOURCES[2]} 
          sou=${SOURCES[3]} rec=${SOURCES[4]} wfl=${TARGETS[1]} 
          verb=y free=n snap=n dabc=y jdata=1 nb=250 ompnth=8
          ''')
     Flow('d_%d' % ishot,'d_fd_%d offset_%d' % (ishot,ishot),
          '''
          transp |
          mutter offset=${SOURCES[1]} v0=1500 t0=0.25 half=n
          ''')

Flow('d',shots,
     '''
     cat axis=3 ${SOURCES[0:%d]} |
     put o3=%d d3=%d label3="sx" unit3=m label2="gx" unit2=m |
     math output=input*10e5 |
     window j1=4 |
     bandpass fmax=125 |
     envelope hilb=y phase=90
     ''' % (nsx,osx,dsx),stdin=0)

Flow('d_1shot','d',
     '''
     window n3=1 f3=10
     ''')


Flow('m','d vel_smooth wav_resample',
     '''
     mpiwem adj=y
     infile=${SOURCES[0]} outfile=${TARGETS[0]}
     vp=${SOURCES[1]} wav=${SOURCES[2]} 
     verbose=y 
     numthreads=8 
     nz=600 oz=0 dz=5 
     nhx=101 dhx=10 ohx=-500
     npx=201 dpx=0.01 opx=-1
     fmin=0 fmax=50
     gz=10 sz=10
     ''')
     
Plot('vel','vel','grey pclip=100 mean=y color=e')
Plot('m_gather','m','window n2=1 f2=350 | grey pclip=98')
Plot('m_stack','m','stack axis=3 | grey pclip=98')
Result('m','vel m_gather m_stack','SideBySideAniso')

End()

