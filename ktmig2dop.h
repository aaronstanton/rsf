/* This file is automatically generated. DO NOT EDIT! */

#ifndef _ktmig2dop_h
#define _ktmig2dop_h


void kt_2d_op(float **d, float **m, float **vp, float **vs, 
               int nt, int nmx, int nhx, 
               float ot, float omx, float ohx, 
               float dt, float dmx, float dhx,
               float aperture, float gamma, bool ps, bool adj, bool verbose);
/*< Kirchhoff time migration operator >*/


void kt_2d_fwd(float **d, float *m, float **vp, float **vs, 
               int nt, int ncmpx, float ot, float ocmpx, float dt, float dcmpx,
               int icipx,
               float hx,float aperture,float gamma,bool ps);
/*< forward Kirchhoff time migration of 1 model trace to all data traces >*/


void kt_2d_adj(float *d, float **m, float **vp, float **vs, 
               int nt, int ncmpx, float ot, float ocmpx, float dt, float dcmpx,
               int icmpx,
               float hx,float aperture,float gamma,bool ps);
/*< adjoint Kirchhoff time migration of 1 data trace to all model points>*/


float spherical_divergence(float ts,float tg,float v);
/*< spherical divergence correction for KT operator >*/


float angle_taper(float ts,float tg, float v, float hx);
/*< angle taper for KT operator >*/


void rho_filt(float *m,int nt,int adj);
/*< forward and adjoint rho filter for KT operator >*/


void triangle_filter(float **m,float **z,int nt,int nmx,int nhx,bool adj);
/*< 5 point triangle filter forward and adjoint operator. It acts on the offset axis. The operator does nothing if the offset axis has a length less than or equal to 5. >*/


void cg_irls_kt2d(float **d,int nd,
             float **m,int nm,
             float *wd,int nwd,
	     int itmax_external,int itmax_internal,
             float **vp,float **vs,
             int nt,int nmx,int nhx,float ot,float omx,float ohx,float dt,float dmx,float dhx,
             float aperture,float psgamma,bool ps,
             int verbose);
/*< Non-quadratic regularization with CG-LS. The inner CG routine is taken from Algorithm 2 of Scales, 1987. Make sure linear operator passes the dot product. In this case (PSTM), the linear operator is a Kirchhoff demigration operator. >*/


float max_abs(float **x,int nt,int nm);
/*< Compute Mx = max absolute value of matrix of floats, x >*/


float cgdot(float **x,int nt,int nm);
/*< Compute the inner product for matrix of floats, x >*/

#endif
